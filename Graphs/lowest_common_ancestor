#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1e5, logN = 22; 
int ancestor[MAXN][logN]; 
int height[MAXN]; 
vector<int> adj[MAXN];

void dfs(int s) {
	for(int i = 1; i <= logN; i++)
		ancestor[s][i] = ancestor[ancestor[s][i-1]][i-1];

	for(auto it: adj[s]){
		height[it] = height[s] + 1;
		ancestor[it][0] = s; 
		
		dfs(it);		 
	}
}

int get_kth_ancestor(int a, int k) {
	for(int i = logN-1; i >= 0; i--) {
		if(k & (1 << i)) {
			a = ancestor[a][i];
		}
	}

	return a;
}

int lca(int a, int b){
	if(height[a] < height[b]) swap(a,b); //always make sure a is deeper than b
	
	//greedly put them in the same level
	for(int i = logN; i >= 0; i--)
		if(height[a] - (1 << i) >= height[b])
			a = ancestor[a][i];

	if(a == b) return a; //if they are the same node than one was the ancestor of the other

	//take both up in the tree until they are one before their lca
	for(int i = logN; i >= 0; i--)
		if(ancestor[a][i] != ancestor[b][i]){
			a = ancestor[a][i];
			b = ancestor[b][i];
		}

	return ancestor[a][0];
}


int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(0);

	ancestor[0][0] = 0;
	dfs(0); //perform dfs to get height of each node and parent, also the dp

	return 0;
}
